#include <stdio.h> 
#include <stdlib.h>
struct matrix {
    int **arr;
    int rows;
    int cols;
};

struct matrix *new_matrix(int rows, int cols) {
    struct matrix *mat = (struct matrix *)malloc(sizeof(struct matrix));
    mat->arr = (int **)malloc(rows * sizeof(int *));
    for (int i = 0; i < rows; i++) {
        mat->arr[i] = (int *)malloc(cols * sizeof(int));
    }
    mat->rows = rows;
    mat->cols = cols;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            mat->arr[i][j] = 0;
        }
    }

    return mat;
}

int zeroing(struct matrix *mat,int rows,int cols){
    int *row=(int*)malloc(rows * sizeof(int));
    for(int i=0;i<rows;i++){
        row[i]=0;
    }
    
    int *col=(int*)malloc(cols * sizeof(int));
    for(int j=0;j<cols;j++){
        col[j]=0;
    }
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (mat->arr[i][j]==0){
                row[i]=1;
                col[j]=1;
            }
        }
    }
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if (row[i] !=0 || col[j]!=0){
                mat->arr[i][j]=0;
            }
        }
    }
    free(row);free(col);
}

int main() {
    int rows = 3;
    int cols = 3;
    struct matrix *m1 = new_matrix(rows, cols);
    printf("Enter values in matrix:");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d",&(m1->arr[i][j]));
        }
    }    
    
    zeroing(m1,rows,cols);
    
    printf("Matrix m1:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", m1->arr[i][j]);
        }
        printf("\n");
    }
    for (int i = 0; i < rows; i++) {
        free(m1->arr[i]);
    }
    free(m1->arr);
    free(m1);

    return 0;
}
